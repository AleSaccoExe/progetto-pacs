qqline(dati)
rm(list=ls())
graphics.off()
dati=MASS::cement
head(dati)
halp(cement)
help(cement)
dim(dati)
hist(dati[, 5])
dev.new()
dev.new()
par(mfrow=c(2, 2))
for(i in 1:4){
plot(dati[, i], dati[, 5], col=i)
}
help(cement)
attach(dati)
lm(y ~ x1 + x2 + x3 + x4, dati)
help(lm)
dati=MASS::cats
help(cats)
dati=MASS::hills
head(hills)
head(dati)
help(climbs)
help(hills)
attach(dati)
matplot(time, type='l')
matplot(time, type='l')
graphics.off()
plot(dati)
names(dati)
colnames(dati)
row.names(dati)
cor(dati)
help(hills)
detach(dati)
rm(list=ls())
graphics.off()
n=10000
r=rep(0, n)
m=100
p=0.5
for(i in 1:n)
for(i in 1:n){
r[i]=rbinom(m, p)
}
for(i in 1:n){
r[i]=rbinom(m, p=p)
}
r=rbinom(n, m, p)
length(r)
mean(r)
x=seq(from=min(r), to=max(r), len=100)
y=dnorm(x, mean=m*p, sd=sqrt(m*p*(1-p)))
hist(r, breaks=20, prob=TRUE)
x=seq(from=min(r), to=max(r), len=100)
y=dnorm(x, mean=m*p, sd=sqrt(m*p*(1-p)))
lines(x, y)
hist(r, breaks=100, prob=TRUE)
lines(x, y)
hist(r, prob=TRUE)
lines(x, y)
for(i in 1:n){
r[i]=r[i]/m
}
hist(r, prob=TRUE)
x=seq(from=min(r), to=max(r), len=100)
y=dnorm(x, mean=p, sd=sqrt(p*(1-p)))
lines(x, y)
mean(r)
var(r)
0.5^2
graphics.off()
n=10000
m=100
p=0.5
r=rbinom(n, m, p)
length(r)
mean(r)
for(i in 1:n){
r[i]=r[i]/m
}
hist(r, prob=TRUE)
x=seq(from=min(r), to=max(r), len=100)
y=dnorm(x, mean=p, sd=sqrt(p*(1-p)/m))
lines(x, y)
mean(r)
var(r)
hist(r, breaks=100, prob=TRUE)
lines(x, y*100)
lines(x, y*10)
lines(x, y)
lines(x, y*1.5)
hist(r, prob=TRUE)
lines(x, y)
abline(v=mean(r), col='red')
rm(list=ls())
# se non mi ricordo la directory di lavoro:
getwd()
help(rexp)
x=seq(0, 5, len=100);
dgamma
help(dgamma)
n=1000
e1=rexp(1000, rate=1);
e2=rexp(1000, rate=1);
e3=rexp(1000, rate=1);
g=e1+e2+e3;
hist(g, breaks=sqrt(n), probability = TRUE);
x=seq(0, 5, len=100);
lines(x, dgamma(x, shape=3, rate=1));
x=seq(0, 12, len=100);
lines(x, dgamma(x, shape=3, rate=1));
rm(list=ls())
graphics.off()
matrix(c(3, 1))
matrix(NA, 3, 1)
help rnorm
help(rnorm)
a=matrix(c(1, 2, 3))
a
a[1, ]
a[, 1]
rm(list=ls())
graphics.off()
n=14;
k=100000;
media=50;
sigma=sqrt(2.5);
alpha=0.05;
q=qnorm(1-0.5*alpha, mean=media, sd=sigma);
q
q=qnorm(1-0.5*alpha, mean=media, sd=sigma, lower.tail = TRUE);
q
q=qnorm(1-0.5*alpha, mean=media, sd=sigma, lower.tail = FALSE);
q
qnorm(0.5)
q=qnorm(1-0.5*alpha);
q
rm(list=ls())
graphics.off()
n=14;
k=100000;
v=matrix(NA, k, n);
media=50;
sigma=sqrt(2.5);
RC=matrix(NA, k, 2);
alpha=0.05;
q=qnorm(1-0.5*alpha);
primo.tipo=0;
media0=media;
for i in 1:k{
v[i, ]=rnorm(mean=media, sd=sigma)
RC[i, 1]=media0-q/sqrt(n);
RC[i, 2]=media0+q/sqrt(n);
if mean(v[i, ])<RC[i, 1] || mean(v[i, ])>RC[i, 2]{
primo.tipo=primo.tipo+1;
}
}
help(for)
help(pnorm)
help for
help(for)
for (i in 1:k){
v[i, ]=rnorm(mean=media, sd=sigma)
RC[i, 1]=media0-q/sqrt(n);
RC[i, 2]=media0+q/sqrt(n);
if (mean(v[i, ])<RC[i, 1] || mean(v[i, ])>RC[i, 2]){
primo.tipo=primo.tipo+1;
}
}
for (i in 1:k){
v[i, ]=rnorm(mean=media, sd=sigma)
RC[i, 1]=media0-q/sqrt(n);
RC[i, 2]=media0+q/sqrt(n);
if (mean(v[i, ])<RC[i, 1] || mean(v[i, ])>RC[i, 2]){
primo.tipo=primo.tipo+1;
}
}
for (i in 1:k){
v[i, ]=rnorm(n, mean=media, sd=sigma)
RC[i, 1]=media0-q/sqrt(n);
RC[i, 2]=media0+q/sqrt(n);
if (mean(v[i, ])<RC[i, 1] || mean(v[i, ])>RC[i, 2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo=primo.tipo/k;
primo.tipo
p.primo.tipo
for (i in 1:k){
v[i, ]=rnorm(n, mean=media, sd=sigma)
RC[i, 1]=media0-q*sigma/sqrt(n);
RC[i, 2]=media0+q*sigma/sqrt(n);
if (mean(v[i, ])<RC[i, 1] || mean(v[i, ])>RC[i, 2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo=primo.tipo/k;
primo.tipo
p.primo.tipo
RC[1, ]
mean(v[1, ])
rm(list=ls())
graphics.off()
n=14;
k=100000;
v=matrix(NA, k, n);
media=50;
sigma=sqrt(2.5);
RC=matrix(NA, k, 2);
alpha=0.05;
q=qnorm(1-0.5*alpha);
primo.tipo=0;
media0=media;
for (i in 1:k){
v[i, ]=rnorm(n, mean=media, sd=sigma)
RC[i, 1]=media0-q*sigma/sqrt(n);
RC[i, 2]=media0+q*sigma/sqrt(n);
if (mean(v[i, ])<RC[i, 1] || mean(v[i, ])>RC[i, 2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo=primo.tipo/k;
rm(list=ls())
graphics.off()
n=14;
k=100;
v=matrix(NA, k, n);
media=50;
sigma=sqrt(2.5);
RC=matrix(NA, k, 2);
alpha=0.05;
q=qnorm(1-0.5*alpha);
primo.tipo=0;
media0=media;
for (i in 1:k){
v[i, ]=rnorm(n, mean=media, sd=sigma)
RC[i, 1]=media0-q*sigma/sqrt(n);
RC[i, 2]=media0+q*sigma/sqrt(n);
if (mean(v[i, ])<RC[i, 1] || mean(v[i, ])>RC[i, 2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo=primo.tipo/k;
rm(list=ls())
graphics.off()
n=14;
k=10000;
v=matrix(NA, k, n);
media=50;
sigma=sqrt(2.5);
RC=matrix(NA, k, 2);
alpha=0.05;
q=qnorm(1-0.5*alpha);
primo.tipo=0;
media0=media;
for (i in 1:k){
v[i, ]=rnorm(n, mean=media, sd=sigma)
RC[i, 1]=media0-q*sigma/sqrt(n);
RC[i, 2]=media0+q*sigma/sqrt(n);
if (mean(v[i, ])<RC[i, 1] || mean(v[i, ])>RC[i, 2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo=primo.tipo/k;
p.primo.tipo=primo.tipo/k;
p.primo.tipo=primo.tipo/k;
rm(list=ls())
graphics.off()
n=14;
k=10000;
v=matrix(NA, k, n);
media=50;
sigma=sqrt(2.5);
RC=matrix(NA, k, 2);
alpha=0.05;
q=qnorm(1-0.5*alpha);
primo.tipo=0;
media0=media+1;
for (i in 1:k){
v[i, ]=rnorm(n, mean=media, sd=sigma)
RC[i, 1]=media0-q*sigma/sqrt(n);
RC[i, 2]=media0+q*sigma/sqrt(n);
if (mean(v[i, ])<RC[i, 1] || mean(v[i, ])>RC[i, 2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo=primo.tipo/k;
help(len)
help(dim+)
help("dim")
dim(seq(1,  10))
dim(seq(1, 10, by=1))
size(seq(10, 1e+5, by=100))
length(seq(10, 1e+5, by=100))
p.primo.tipo=rep(0, 1000);
rep(0.5, 5)
rm(list=ls())
graphics.off()
n=14;
rm(list=ls())
graphics.off()
n=14;
v=matrix(NA, k, n);
media=50;
sigma=sqrt(2.5);
RC=matrix(NA, 2, 1);
alpha=0.05;
q=qnorm(1-0.5*alpha);
primo.tipo=0;
p.primo.tipo=rep(0, 1000);
media0=media;
for (k in seq(10, 1e+5, by=100)){
for (i in 1:k){
v=rnorm(n, mean=media, sd=sigma)
RC[1]=media0-q*sigma/sqrt(n);
RC[2]=media0+q*sigma/sqrt(n);
if (mean(v)<RC[1] || mean(v)>RC[2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo[j]=primo.tipo/k;
j=j+1;
}
j=1;
for (k in seq(10, 1e+5, by=100)){
for (i in 1:k){
v=rnorm(n, mean=media, sd=sigma)
RC[1]=media0-q*sigma/sqrt(n);
RC[2]=media0+q*sigma/sqrt(n);
if (mean(v)<RC[1] || mean(v)>RC[2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo[j]=primo.tipo/k;
j=j+1;
}
p.primo.tipo
length(seq(10, 1e+4, by=1000))
rm(list=ls())
graphics.off()
n=14;
media=50;
sigma=sqrt(2.5);
RC=matrix(NA, 2, 1);
alpha=0.05;
q=qnorm(1-0.5*alpha);
primo.tipo=0;
p.primo.tipo=rep(0, 10);
media0=media;
j=1;
for (k in seq(10, 1e+4, by=1000)){
for (i in 1:k){
v=rnorm(n, mean=media, sd=sigma)
RC[1]=media0-q*sigma/sqrt(n);
RC[2]=media0+q*sigma/sqrt(n);
if (mean(v)<RC[1] || mean(v)>RC[2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo[j]=primo.tipo/k;
j=j+1;
}
plot(seq(10, 1e+4, by=1000), p.primo.tipo);
lines(seq(10, 1e+4, by=1000), rep(alpha, 10));
for (k in seq(10, 1e+4, by=1000)){
for (i in 1:k){
v=rnorm(n, mean=media, sd=sigma)
RC[1]=media0-q*sigma/sqrt(n);
RC[2]=media0+q*sigma/sqrt(n);
if (mean(v)<RC[1] || mean(v)>RC[2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo[j]=primo.tipo/k;
j=j+1;
primo.tipo=0;
}
plot(seq(10, 1e+4, by=1000), p.primo.tipo);
rm(list=ls())
graphics.off()
n=14;
media=50;
sigma=sqrt(2.5);
RC=matrix(NA, 2, 1);
alpha=0.05;
q=qnorm(1-0.5*alpha);
primo.tipo=0;
p.primo.tipo=rep(0, 10);
media0=media;
j=1;
for (k in seq(10, 1e+4, by=1000)){
for (i in 1:k){
v=rnorm(n, mean=media, sd=sigma)
RC[1]=media0-q*sigma/sqrt(n);
RC[2]=media0+q*sigma/sqrt(n);
if (mean(v)<RC[1] || mean(v)>RC[2]){
primo.tipo=primo.tipo+1;
}
}
p.primo.tipo[j]=primo.tipo/k;
j=j+1;
primo.tipo=0;
}
plot(seq(10, 1e+4, by=1000), p.primo.tipo);
lines(seq(10, 1e+4, by=1000), rep(alpha, 10));
rm(list=ls())
graphics.off()
dimensione=lenght(seq(-5, 5, by=0.1));
dimensione=length(seq(-5, 5, by=0.1));
dimensione
rm(list=ls())
graphics.off()
alpha=0.05;
n=100;
RC=0+sigma*qnorm(1-alpha*0.5)/sqrt(n);
sigma=3;
RC=0+sigma*qnorm(1-alpha*0.5)/sqrt(n);
dimensione=length(seq(-5, 5, by=0.1));
potenza=rep(0, dimensione);
k=1000;
j=1;
pot=0;
for (media in seq(-5, 5, by=0.1)){
for (i in 1:k){
v=rnorm(n, mean=media, sd=sigma);
if(mean(v)>RC){
pot=pot+1;
}
}
potenza[j]=pot/k;
pot=0;
j=j+1;
}
plot(seq(-5, 5, by=0.1), potenza);
rm(list=ls())
graphics.off()
alpha=0.01;
n=100;
sigma=3;
RC=0+sigma*qnorm(1-alpha*0.5)/sqrt(n);
dimensione=length(seq(-5, 5, by=0.1));
potenza=rep(0, dimensione);
k=1000;
j=1;
pot=0;
for (media in seq(-5, 5, by=0.1)){
for (i in 1:k){
v=rnorm(n, mean=media, sd=sigma);
if(mean(v)>RC){
pot=pot+1;
}
}
potenza[j]=pot/k;
pot=0;
j=j+1;
}
plot(seq(-5, 5, by=0.1), potenza);
rm(list=ls())
graphics.off()
fata(Heigths)
data(Heigths)
data(Heights)
data(Heights)
5+5
ans
a = 2
clear
clc
pwd
ls
clc
install.packages("Rcpp")
install.packages("Rtools")
library(plot3d)
library(devtools)
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
.libPaths()
library(hello)
installed.packages("hello")
library(hello)
library(etable)
..libPaths()
.libPaths()
installed.packages("etable" , lib = "D:/alean/librerie-R-windows")
installed.packages("devtools" , lib = "D:/alean/librerie-R-windows")
installed.packages("hello" , lib = "D:/alean/librerie-R-windows")
installed.packages("hello")
5+5
Rcpp::sourceCpp("myfunction.cpp")
library(Rcpp)
installed.packages("hello")
.libPaths("D:/alean/librerie-R-windows")
.libPaths()
install.packages("devtools")
library(devtools)
library(devtools)
q()
setwd("D:/alean/progetto-pacs/meshsimplification/RPackage/MeshDataSimplification")
getwd()
library(devtools)
.libPaths(c("D:/alean/librerie-R-windows", .libPaths()))
.libPaths()
library(devtools)
install(9)
install()
Rcmd.exe
R.exe
